#pragma once
#include "meta/Variant.h"
#include "strings/String.h"
#include "strings/View.h"
#include "text/Position.h"

#include <vector>

/// Data generated by diagnostics for user and tool consumption
///
/// note:
/// - the source code might contain UTF8 decoding errors from the source file!
/// - make sure invalid unicode is escaped properly to make those visible!
namespace diagnostic {

using strings::String;

struct Code {
    String clazzId; // allow to distinguish different diagnostic sources
                    // - do not add diagnostics for classIds that you do not control!
                    // - each clazzId might be documented on a different URL
    uint32_t number{}; // stable identifing number for a diagnostic
                       // - always printed as decimal number!
                       // - use large numbers to categorize similar diagnostics (eg: 10xxx)
                       // - you might want to change it if semantics of the diagnostics are changed significantly
};
struct TextSpan {
    int start{}; // byte index where span starts
    int length{}; // byte count that are part of span
};
using TextSpans = std::vector<TextSpan>;

struct NumberLiteral {
    TextSpan span;
};
struct StringLiteral {
    TextSpan span;
};
struct Seperator {
    TextSpan span;
};
struct Comment {
    TextSpan span;
};
struct Identifier {
    enum class Type { Unknown, Module, Type, Function, LocalArgument, LocalVariable, ExternalVariable };

    TextSpan span;
    Type type{};
};
struct Marker {
    TextSpan span;
    String details;
};

using Highlight = meta::Variant<NumberLiteral, StringLiteral, Seperator, Comment, Identifier, Marker>;
using Highlights = std::vector<Highlight>;

struct CodeBlock {
    String code;
    Highlights highlights;
};

struct SourceCodeBlock : CodeBlock {
    String fileName; // - full path according to the platform
                     // - might be empty if input was given from console or string
    text::Line sourceLine{0}; // note: valid line numbers start with 1
};

struct Important {
    TextSpan span;
};
struct Link {
    TextSpan span;
    String url;
};
struct Monospaced {
    TextSpan span;
};

using SpanFormat = meta::Variant<Important, Link, Monospaced>;
using SpanFormats = std::vector<SpanFormat>;

struct Paragraph {
    String text;
    SpanFormats formats;
};
struct Headline {
    String text;
};

using Section = meta::Variant<Headline, Paragraph, CodeBlock, SourceCodeBlock>;
using Document = std::vector<Section>;

struct Explanation {
    String title;
    Document details;
};

struct KeepLine {
    String sourceLine{};
};
struct DiffLine {
    String sourceLine{};
    String targetLine{};
};
struct RemoveLine {
    String sourceLine{};
};
struct AddLine {
    String targetLine{};
};
using LineDiff = meta::Variant<KeepLine, DiffLine, RemoveLine, AddLine>;
using LineDiffs = std::vector<LineDiff>;

struct DiffSection {
    String fileName; // - full path according to the platform
                     // - might be empty if input was given from console or string
    text::Line sourceLine{0}; // note: valid line numbers start with 1
    LineDiffs lineDiffs;
};
using DiffSections = std::vector<DiffSection>;

struct Substitution {
    String title;
    Document description;
    DiffSections diffSections;
};
using Substitutions = std::vector<Substitution>;

struct Suggestion {
    String title;
    Document details;
    Substitutions substitutions;
};

using Part = meta::Variant<Explanation, Suggestion>;
using Parts = std::vector<Part>;

struct Diagnostic {
    Code code;
    Parts parts;
};
using Diagnostics = std::vector<Diagnostic>;

} // namespace diagnostic
